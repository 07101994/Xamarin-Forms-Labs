<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
    <PropertyGroup>
        <DownloadNuGetExe Condition="  '$(DownloadNuGetExe)' == '' ">true</DownloadNuGetExe>
        <RestorePackages Condition="  '$(RestorePackages)' == '' ">false</RestorePackages>
        <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">NuGet.exe</NuGetExePath>
        <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">"$(NuGetExePath)"</NuGetCommand>
        <NuGetCommand Condition=" '$(OS)' != 'Windows_NT' ">mono --runtime=v4.0.30319 $(NuGetExePath)</NuGetCommand>
        <PackagesDirectory Condition=" '$(PackagesDirectory)' == '' ">$([System.IO.Path]::Combine($(MSBuildProjectDirectory), "src", "Xamarin.Forms.Labs", "packages"))</PackagesDirectory>
        <PackagesConfigPath Condition=" '$(PackagesConfigPath)' == '' ">$([System.IO.Path]::Combine($(MSBuildProjectDirectory), "src", "Xamarin.Forms.Labs", "Xamarin.Forms.Labs", "packages.config"))</PackagesConfigPath>

        <RestoreCommand>$(NuGetCommand) restore "$(PackagesConfigPath)" -NonInteractive -PackagesDirectory $(PackagesDirectory)" </RestoreCommand>
        <SolutionFile>$([System.IO.Path]::Combine($(MSBuildProjectDirectory), "src", "Xamarin.Forms.Labs", "Xamarin.Forms.Labs.sln"))</SolutionFile> 
        <Configuration>Release</Configuration>
    </PropertyGroup>

    <ItemGroup>
        <SolutionToBuild Include="$(SolutionFile)">
            <Properties>Configuration=$(Configuration)</Properties>
        </SolutionToBuild>

        <ProjectsToPack Include='$(MSBuildProjectDirectory)\src\**\*.csproj' />
    </ItemGroup>

    <Target Name="Build">
        <CallTarget Targets="RestorePackages" />
        <CallTarget Targets="BuildSolution" />
        <CallTarget Targets="PackNuGetPackages" />
    </Target>

    <Target Name="BuildSolution">
      <Message Text="Building Solutions" />
      <MSBuild Projects="@(SolutionToBuild)"/>   
    </Target>

    <Target Name="PackNuGetPackages">
      <Message Text="Packing Nuget Packages" />
      <Exec Command="$(NuGetCommand) pack @(ProjectsToPack) -prop Configuration=$(Configuration)" 
              Condition="'$(OS)' != 'Windows_NT' And Exists('$(PackagesConfigPath)') and Exists(@(ProjectsToPack->'%(RootDir)%(Directory)%(FileName).nuspec')) and '%(Identity)' != ''" />

      <Exec Command="$(NuGetCommand) pack @(ProjectsToPack) -prop Configuration=$(Configuration)" 
              LogStandardErrorAsError="true" 
              Condition="'$(OS)' == 'Windows_NT' And Exists('$(PackagesConfigPath)') and Exists(@(ProjectsToPack->'%(RootDir)%(Directory)%(FileName).nuspec')) and '%(Identity)' != ''" />
    </Target>

    <!-- ********************************************************************************************************** -->
    <!-- The code below this section is re-used from the nuget.targets file in the nuget.codeplex.org project. -->
    <!-- This code is released under Apache License 2.0 (http://nuget.codeplex.com/license). -->
    <!-- ********************************************************************************************************** -->
    <Target Name="RestorePackages" DependsOnTargets="CheckPrerequisites">
        <Exec Command="$(RestoreCommand)" Condition="'$(OS)' != 'Windows_NT' And Exists('$(PackagesConfigPath)')" />
        <Exec Command="$(RestoreCommand)" LogStandardErrorAsError="true" Condition="'$(OS)' == 'Windows_NT' And Exists('$(PackagesConfigPath)')" />
    </Target>

    <Target Name="CheckPrerequisites">
        <!-- Raise an error if we're unable to locate nuget.exe  -->
        <Error Condition="'$(DownloadNuGetExe)' != 'true' AND !Exists('$(NuGetExePath)')" Text="Unable to locate '$(NuGetExePath)'" />
        <!--
        Take advantage of MsBuild's build dependency tracking to make sure that we only ever download nuget.exe once.
        This effectively acts as a lock that makes sure that the download operation will only happen once and all
        parallel builds will have to wait for it to complete.
        -->
        <MsBuild Targets="_DownloadNuGet" Projects="$(MSBuildThisFileFullPath)" Properties="Configuration=NOT_IMPORTANT;DownloadNuGetExe=$(DownloadNuGetExe)" />
    </Target>

    <Target Name="_DownloadNuGet">
        <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition=" '$(DownloadNuGetExe)' == 'true' AND !Exists('$(NuGetExePath)')" />
   </Target>

    <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <OutputFilename ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Net" />
            <Using Namespace="Microsoft.Build.Framework" />
            <Using Namespace="Microsoft.Build.Utilities" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                try {
                    OutputFilename = Path.GetFullPath(OutputFilename);

                    Log.LogMessage("Downloading latest version of NuGet.exe...");
                    WebClient webClient = new WebClient();
                    webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
